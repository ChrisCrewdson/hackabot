Hackabot Remote Protocol
========================

OVERVIEW
--------

    Hackabot features a text based protocol for sending remote commands
    to the running bot. This is normally used by external event handlers
    (aka commands and hooks) over stdout for sending commands to the bot
    or via the control socket for fetching extra information. Two way
    communication is not allowed over stdin and stdout in external event
    handlers because stdin is immediately closed after the initial input
    text.

    This protocol can be used within scripts by making use of
    Hackabot::Client in Perl, hackabot.client.Client in Python,
    bin/client in anything else, or by talking to the Unix socket.

    Every command will return a single line response starting with ok
    or error. If the command is returning data it will follow the ok
    on the same line.

EXAMPLE
-------

    Sending a message to a channel with a single network configuration:
    SEND: to #hackabot
    RECV: ok
    SEND: msg this is fun
    RECV: ok

    Likewise for a multi-network configuration, using the network id:
    SEND: net freenode
    RECV: ok
    SEND: to #hackabot
    RECV: ok
    SEND: msg zomg so hard

    And while we are at it lets get a list of names:
    SEND: names #hackabot
    RECV: ok marineam hackabot

PROTOCOL
--------
Version: 2.0

action
    Alias for 'me'

dump
    Send all following lines to the current 'to' and 'net'.
    White space will be preserved, so this is what you want for
    spanning a channel with ASCII art and such crap.

    dump
    <some text>
    <more text>

join
    Join a given channel.

    join <channel>

me
    Send a /me message using the current 'to' and 'net'.
    Note that all beginning and ending whitespace is ignored.

    me <some message>

msg
    Send a message using the current 'to' and 'net'.
    Note that all beginning and ending whitespace is ignored.
    If you need to send ascii art use the 'dump' command.

    msg <some message>

names
    Get the list of names in a channel.
    If #channel is ommitted then the current to is used.

    names [#channel]

net
    Set the network to send messages to. For events the default
    is the current network, otherwise the first network listed in
    the config will be the default.
    If the argument is omitted the current network is returned.

    net [<network id>]

nick
    Change or get the bots nick. If no argument is given the
    current one is returned.

    nick [<new nick>]

notice
    Send a notice using the current 'to' and 'net'.
    Note that all beginning and ending whitespace is ignored.

    notice <some message>

part
    Leave a given channel.

    part <channel> [<some reason>]

quit
    Quit!

    quit [<some reason>]

send
    Alias for 'msg'

sendnext
    Alias for 'dump'

to
    Set a nick or channel to send messages to. For events the
    default to the current channel for public messages or the
    sending user for private messages. If this is not an event
    there is no default and must be set explicitly.
    If the argument is omitted the current target is returned.

    to [<nick or channel>]

topic
    Get or set a topic in a channel using the current to.

    topic [<some message>]


Generated by dump-protocol on Nov 30 2008 at 01:12:41 EST
