#!/usr/bin/env python

import os
import re
import sys
import glob
import shlex
import warnings

DIRS = ('commands/*',
        'hooks/*/*',
        'lib/perl/*.pm',
        'lib/python/hackabot/*.py',
        'lib/python/hackabot/plugins/*.py')
EXCLUDE = ('lib/python/hackabot/etree.py',)
ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Python 2.4 compat
if 'any' not in globals():
    def any(seq):
        for item in seq:
            if item:
                return True
        return False

def check_sh(fd):
    # Super shitty ass shell parser, but this should be sufficient
    # to sort of catch things, hopefully doesn't produce false positives.
    lex = shlex.shlex(fd, posix=True)
    lex.wordchars += ':,'
    lex.whitespace = ' \t' # tokenize newlines
    lex.quotes += '`'
    shlex.escapedquotes = lex.quotes
    newline = True
    incase = 0
    incasematch = False
    while True:
        token = lex.get_token()
        if not token:
            break
        elif token == 'case':
            incase += 1
            newline = False
            continue
        elif incase:
            if token == 'esac':
                incase -= 1
            continue
        elif token in ('\n', '\r', ';', '|'):
            newline = True
            continue
        elif not newline:
            continue

        next = lex.get_token()
        if next == '=':
            next = lex.get_token()
            if next == '$':
                lex.push_token(next)
                continue
            continue
        else:
            lex.push_token(next)

        if token in ('if', 'elif', 'do'):
            continue

        newline = False

        if (not token.isalnum() or token in
                ('then','else','fi','done','echo','function','set')):
            continue

        found = False
        for dir in os.environ['PATH'].split(':'):
            if os.path.exists(os.path.join(dir, token)):
                found = True
                break

        if not found:
            sys.stderr.write("Command not found: %s\n" % token)
            sys.stderr.write("Dependency check for %s failed\n" % fd.name)

def check_perl(fd):
    for line in fd:
        match = re.match('^\s*use\s+([\w:]+)', line)
        if match:
            ret = os.system("perl -e 'use %s'" % match.group(1))
            if ret != 0:
                sys.stderr.write("Dependency check for %s failed\n" % fd.name)

def check_python(fd):
    for line in fd:
        match = re.match('^\s*((from\s+[\w\.]+\s+)?import\s+[\w\.\s,]+)', line)
        if match:
            try:
                exec match.group(1) in {}
            except Exception, ex:
                sys.stderr.write("%s: %s\n" % (match.group(1).strip(), ex))
                sys.stderr.write("Dependency check for %s failed\n" % fd.name)

def check(fd):
    top = fd.readline()
    match = re.match('^#!\s*(/usr)?/bin/(env\s+)?(perl|python|sh|bash)', top)
    if match:
        if match.group(3) == "perl":
            check_perl(fd)
        elif match.group(3) == "python":
            check_python(fd)
        elif match.group(3) in ('sh', 'bash'):
            check_sh(fd)
    elif fd.name.endswith('.py'):
        check_python(fd)

def main():
    warnings.simplefilter('ignore', DeprecationWarning)
    path = os.path.join(ROOT, 'lib', 'python')
    sys.path.append(path)

    perllib = os.path.join(ROOT, 'lib', 'perl')
    if 'PERL5LIB' in os.environ:
        os.environ['PERL5LIB'] += ":"+perllib
    else:
        os.environ['PERL5LIB'] = perllib

    for dir in DIRS:
        dir = os.path.join(ROOT, dir)
        for cmd in glob.glob(dir):
            if not os.path.isfile(cmd):
                continue
            elif any([cmd.endswith(x) for x in EXCLUDE]):
                continue
            fd = open(cmd)
            check(fd)
            fd.close()

if __name__ == "__main__":
    main()
