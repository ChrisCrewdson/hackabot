#!/usr/bin/env python

"""Dump the current remote protocol"""

import os
import sys
import time

if __name__ == "__main__":
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append("%s/lib/python" % root)

    from hackabot import protocol, __version__

    api = open("%s/doc/protocol.txt" % root, "w")

    api.write("""Hackabot Remote Protocol\n========================

OVERVIEW
--------

    Hackabot features a text based protocol for sending remote commands
    to the running bot. This is normally used by external event handlers
    (aka commands and hooks) over stdout for sending commands to the bot
    or via the control socket for fetching extra information. Two way
    communication is not allowed over stdin and stdout in external event
    handlers because stdin is immediately closed after the initial input
    text.

    This protocol can be used within scripts by making use of
    Hackabot::Client in Perl, hackabot.client.Client in Python,
    bin/client in anything else, or by talking to the Unix socket.

    Every command will return a single line response starting with ok
    or error. If the command is returning data it will follow the ok
    on the same line.

EXAMPLE
-------

    Sending a message to a channel with a single network configuration:
    SEND: to #hackabot
    RECV: ok
    SEND: msg this is fun
    RECV: ok

    Likewise for a multi-network configuration, using the network id:
    SEND: net freenode
    RECV: ok
    SEND: to #hackabot
    RECV: ok
    SEND: msg zomg so hard

    And while we are at it lets get a list of names:
    SEND: names #hackabot
    RECV: ok marineam hackabot

PROTOCOL
--------""")

    api.write("\nVersion: %s\n\n" % __version__)

    functions = []
    for name in protocol.HBLineProtocol.__dict__:
        if name.startswith("handle_"):
            functions.append(name)

    functions.sort()

    for name in functions:
        func = getattr(protocol.HBLineProtocol, name)
        name = name.replace("handle_", "", 1)

        api.write("%s\n" % name)
        for line in func.__doc__.strip().splitlines():
            line = "    %s" % line.strip()
            api.write("%s\n" % line.rstrip())
        api.write("\n")

    me = os.path.basename(__file__)
    api.write("\nGenerated by %s %s\n" %
            (me, time.strftime("on %b %d %Y at %H:%M:%S %Z")))

    api.close()
